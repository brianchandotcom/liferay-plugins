/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sync.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.sync.model.DLSync;
import com.liferay.sync.model.DLSyncModel;
import com.liferay.sync.model.DLSyncSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DLSync service. Represents a row in the &quot;Sync_DLSync&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.sync.model.DLSyncModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DLSyncImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DLSyncImpl
 * @see com.liferay.sync.model.DLSync
 * @see com.liferay.sync.model.DLSyncModel
 * @generated
 */
@JSON(strict = true)
public class DLSyncModelImpl extends BaseModelImpl<DLSync>
	implements DLSyncModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a d l sync model instance should use the {@link com.liferay.sync.model.DLSync} interface instead.
	 */
	public static final String TABLE_NAME = "Sync_DLSync";
	public static final Object[][] TABLE_COLUMNS = {
			{ "syncId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.BIGINT },
			{ "modifiedDate", Types.BIGINT },
			{ "fileId", Types.BIGINT },
			{ "fileUuid", Types.VARCHAR },
			{ "repositoryId", Types.BIGINT },
			{ "parentFolderId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "checksum", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "event", Types.VARCHAR },
			{ "lockUserId", Types.BIGINT },
			{ "lockUserName", Types.VARCHAR },
			{ "size_", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "version", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Sync_DLSync (syncId LONG not null primary key,companyId LONG,createDate LONG,modifiedDate LONG,fileId LONG,fileUuid VARCHAR(75) null,repositoryId LONG,parentFolderId LONG,name VARCHAR(75) null,checksum VARCHAR(75) null,description VARCHAR(75) null,event VARCHAR(75) null,lockUserId LONG,lockUserName VARCHAR(75) null,size_ LONG,type_ VARCHAR(75) null,version VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Sync_DLSync";
	public static final String ORDER_BY_JPQL = " ORDER BY dlSync.companyId ASC, dlSync.modifiedDate ASC, dlSync.repositoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Sync_DLSync.companyId ASC, Sync_DLSync.modifiedDate ASC, Sync_DLSync.repositoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.sync.model.DLSync"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.sync.model.DLSync"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.sync.model.DLSync"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long FILEID_COLUMN_BITMASK = 2L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 4L;
	public static long REPOSITORYID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DLSync toModel(DLSyncSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DLSync model = new DLSyncImpl();

		model.setSyncId(soapModel.getSyncId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFileId(soapModel.getFileId());
		model.setFileUuid(soapModel.getFileUuid());
		model.setRepositoryId(soapModel.getRepositoryId());
		model.setParentFolderId(soapModel.getParentFolderId());
		model.setName(soapModel.getName());
		model.setChecksum(soapModel.getChecksum());
		model.setDescription(soapModel.getDescription());
		model.setEvent(soapModel.getEvent());
		model.setLockUserId(soapModel.getLockUserId());
		model.setLockUserName(soapModel.getLockUserName());
		model.setSize(soapModel.getSize());
		model.setType(soapModel.getType());
		model.setVersion(soapModel.getVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DLSync> toModels(DLSyncSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DLSync> models = new ArrayList<DLSync>(soapModels.length);

		for (DLSyncSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.sync.model.DLSync"));

	public DLSyncModelImpl() {
	}

	public long getPrimaryKey() {
		return _syncId;
	}

	public void setPrimaryKey(long primaryKey) {
		setSyncId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return _syncId;
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DLSync.class;
	}

	public String getModelClassName() {
		return DLSync.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("syncId", getSyncId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("fileId", getFileId());
		attributes.put("fileUuid", getFileUuid());
		attributes.put("repositoryId", getRepositoryId());
		attributes.put("parentFolderId", getParentFolderId());
		attributes.put("name", getName());
		attributes.put("checksum", getChecksum());
		attributes.put("description", getDescription());
		attributes.put("event", getEvent());
		attributes.put("lockUserId", getLockUserId());
		attributes.put("lockUserName", getLockUserName());
		attributes.put("size", getSize());
		attributes.put("type", getType());
		attributes.put("version", getVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long syncId = (Long)attributes.get("syncId");

		if (syncId != null) {
			setSyncId(syncId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createDate = (Long)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedDate = (Long)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long fileId = (Long)attributes.get("fileId");

		if (fileId != null) {
			setFileId(fileId);
		}

		String fileUuid = (String)attributes.get("fileUuid");

		if (fileUuid != null) {
			setFileUuid(fileUuid);
		}

		Long repositoryId = (Long)attributes.get("repositoryId");

		if (repositoryId != null) {
			setRepositoryId(repositoryId);
		}

		Long parentFolderId = (Long)attributes.get("parentFolderId");

		if (parentFolderId != null) {
			setParentFolderId(parentFolderId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String checksum = (String)attributes.get("checksum");

		if (checksum != null) {
			setChecksum(checksum);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String event = (String)attributes.get("event");

		if (event != null) {
			setEvent(event);
		}

		Long lockUserId = (Long)attributes.get("lockUserId");

		if (lockUserId != null) {
			setLockUserId(lockUserId);
		}

		String lockUserName = (String)attributes.get("lockUserName");

		if (lockUserName != null) {
			setLockUserName(lockUserName);
		}

		Long size = (Long)attributes.get("size");

		if (size != null) {
			setSize(size);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}
	}

	@JSON
	public long getSyncId() {
		return _syncId;
	}

	public void setSyncId(long syncId) {
		_syncId = syncId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask = -1L;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(long createDate) {
		_createDate = createDate;
	}

	@JSON
	public long getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(long modifiedDate) {
		_columnBitmask = -1L;

		if (!_setOriginalModifiedDate) {
			_setOriginalModifiedDate = true;

			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public long getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	public long getFileId() {
		return _fileId;
	}

	public void setFileId(long fileId) {
		_columnBitmask |= FILEID_COLUMN_BITMASK;

		if (!_setOriginalFileId) {
			_setOriginalFileId = true;

			_originalFileId = _fileId;
		}

		_fileId = fileId;
	}

	public long getOriginalFileId() {
		return _originalFileId;
	}

	@JSON
	public String getFileUuid() {
		if (_fileUuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileUuid;
		}
	}

	public void setFileUuid(String fileUuid) {
		_fileUuid = fileUuid;
	}

	@JSON
	public long getRepositoryId() {
		return _repositoryId;
	}

	public void setRepositoryId(long repositoryId) {
		_columnBitmask = -1L;

		if (!_setOriginalRepositoryId) {
			_setOriginalRepositoryId = true;

			_originalRepositoryId = _repositoryId;
		}

		_repositoryId = repositoryId;
	}

	public long getOriginalRepositoryId() {
		return _originalRepositoryId;
	}

	@JSON
	public long getParentFolderId() {
		return _parentFolderId;
	}

	public void setParentFolderId(long parentFolderId) {
		_parentFolderId = parentFolderId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public String getChecksum() {
		if (_checksum == null) {
			return StringPool.BLANK;
		}
		else {
			return _checksum;
		}
	}

	public void setChecksum(String checksum) {
		_checksum = checksum;
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public String getEvent() {
		if (_event == null) {
			return StringPool.BLANK;
		}
		else {
			return _event;
		}
	}

	public void setEvent(String event) {
		_event = event;
	}

	@JSON
	public long getLockUserId() {
		return _lockUserId;
	}

	public void setLockUserId(long lockUserId) {
		_lockUserId = lockUserId;
	}

	public String getLockUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getLockUserId(), "uuid", _lockUserUuid);
	}

	public void setLockUserUuid(String lockUserUuid) {
		_lockUserUuid = lockUserUuid;
	}

	@JSON
	public String getLockUserName() {
		if (_lockUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _lockUserName;
		}
	}

	public void setLockUserName(String lockUserName) {
		_lockUserName = lockUserName;
	}

	@JSON
	public long getSize() {
		return _size;
	}

	public void setSize(long size) {
		_size = size;
	}

	@JSON
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	public void setType(String type) {
		_type = type;
	}

	@JSON
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	public void setVersion(String version) {
		_version = version;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DLSync.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DLSync toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DLSync)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DLSyncImpl dlSyncImpl = new DLSyncImpl();

		dlSyncImpl.setSyncId(getSyncId());
		dlSyncImpl.setCompanyId(getCompanyId());
		dlSyncImpl.setCreateDate(getCreateDate());
		dlSyncImpl.setModifiedDate(getModifiedDate());
		dlSyncImpl.setFileId(getFileId());
		dlSyncImpl.setFileUuid(getFileUuid());
		dlSyncImpl.setRepositoryId(getRepositoryId());
		dlSyncImpl.setParentFolderId(getParentFolderId());
		dlSyncImpl.setName(getName());
		dlSyncImpl.setChecksum(getChecksum());
		dlSyncImpl.setDescription(getDescription());
		dlSyncImpl.setEvent(getEvent());
		dlSyncImpl.setLockUserId(getLockUserId());
		dlSyncImpl.setLockUserName(getLockUserName());
		dlSyncImpl.setSize(getSize());
		dlSyncImpl.setType(getType());
		dlSyncImpl.setVersion(getVersion());

		dlSyncImpl.resetOriginalValues();

		return dlSyncImpl;
	}

	public int compareTo(DLSync dlSync) {
		int value = 0;

		if (getCompanyId() < dlSync.getCompanyId()) {
			value = -1;
		}
		else if (getCompanyId() > dlSync.getCompanyId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getModifiedDate() < dlSync.getModifiedDate()) {
			value = -1;
		}
		else if (getModifiedDate() > dlSync.getModifiedDate()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getRepositoryId() < dlSync.getRepositoryId()) {
			value = -1;
		}
		else if (getRepositoryId() > dlSync.getRepositoryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DLSync)) {
			return false;
		}

		DLSync dlSync = (DLSync)obj;

		long primaryKey = dlSync.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DLSyncModelImpl dlSyncModelImpl = this;

		dlSyncModelImpl._originalCompanyId = dlSyncModelImpl._companyId;

		dlSyncModelImpl._setOriginalCompanyId = false;

		dlSyncModelImpl._originalModifiedDate = dlSyncModelImpl._modifiedDate;

		dlSyncModelImpl._setOriginalModifiedDate = false;

		dlSyncModelImpl._originalFileId = dlSyncModelImpl._fileId;

		dlSyncModelImpl._setOriginalFileId = false;

		dlSyncModelImpl._originalRepositoryId = dlSyncModelImpl._repositoryId;

		dlSyncModelImpl._setOriginalRepositoryId = false;

		dlSyncModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DLSync> toCacheModel() {
		DLSyncCacheModel dlSyncCacheModel = new DLSyncCacheModel();

		dlSyncCacheModel.syncId = getSyncId();

		dlSyncCacheModel.companyId = getCompanyId();

		dlSyncCacheModel.createDate = getCreateDate();

		dlSyncCacheModel.modifiedDate = getModifiedDate();

		dlSyncCacheModel.fileId = getFileId();

		dlSyncCacheModel.fileUuid = getFileUuid();

		String fileUuid = dlSyncCacheModel.fileUuid;

		if ((fileUuid != null) && (fileUuid.length() == 0)) {
			dlSyncCacheModel.fileUuid = null;
		}

		dlSyncCacheModel.repositoryId = getRepositoryId();

		dlSyncCacheModel.parentFolderId = getParentFolderId();

		dlSyncCacheModel.name = getName();

		String name = dlSyncCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dlSyncCacheModel.name = null;
		}

		dlSyncCacheModel.checksum = getChecksum();

		String checksum = dlSyncCacheModel.checksum;

		if ((checksum != null) && (checksum.length() == 0)) {
			dlSyncCacheModel.checksum = null;
		}

		dlSyncCacheModel.description = getDescription();

		String description = dlSyncCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dlSyncCacheModel.description = null;
		}

		dlSyncCacheModel.event = getEvent();

		String event = dlSyncCacheModel.event;

		if ((event != null) && (event.length() == 0)) {
			dlSyncCacheModel.event = null;
		}

		dlSyncCacheModel.lockUserId = getLockUserId();

		dlSyncCacheModel.lockUserName = getLockUserName();

		String lockUserName = dlSyncCacheModel.lockUserName;

		if ((lockUserName != null) && (lockUserName.length() == 0)) {
			dlSyncCacheModel.lockUserName = null;
		}

		dlSyncCacheModel.size = getSize();

		dlSyncCacheModel.type = getType();

		String type = dlSyncCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			dlSyncCacheModel.type = null;
		}

		dlSyncCacheModel.version = getVersion();

		String version = dlSyncCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			dlSyncCacheModel.version = null;
		}

		return dlSyncCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{syncId=");
		sb.append(getSyncId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", fileId=");
		sb.append(getFileId());
		sb.append(", fileUuid=");
		sb.append(getFileUuid());
		sb.append(", repositoryId=");
		sb.append(getRepositoryId());
		sb.append(", parentFolderId=");
		sb.append(getParentFolderId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", checksum=");
		sb.append(getChecksum());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", event=");
		sb.append(getEvent());
		sb.append(", lockUserId=");
		sb.append(getLockUserId());
		sb.append(", lockUserName=");
		sb.append(getLockUserName());
		sb.append(", size=");
		sb.append(getSize());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.liferay.sync.model.DLSync");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>syncId</column-name><column-value><![CDATA[");
		sb.append(getSyncId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileId</column-name><column-value><![CDATA[");
		sb.append(getFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileUuid</column-name><column-value><![CDATA[");
		sb.append(getFileUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentFolderId</column-name><column-value><![CDATA[");
		sb.append(getParentFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>checksum</column-name><column-value><![CDATA[");
		sb.append(getChecksum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>event</column-name><column-value><![CDATA[");
		sb.append(getEvent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lockUserId</column-name><column-value><![CDATA[");
		sb.append(getLockUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lockUserName</column-name><column-value><![CDATA[");
		sb.append(getLockUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>size</column-name><column-value><![CDATA[");
		sb.append(getSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DLSync.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { DLSync.class };
	private long _syncId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createDate;
	private long _modifiedDate;
	private long _originalModifiedDate;
	private boolean _setOriginalModifiedDate;
	private long _fileId;
	private long _originalFileId;
	private boolean _setOriginalFileId;
	private String _fileUuid;
	private long _repositoryId;
	private long _originalRepositoryId;
	private boolean _setOriginalRepositoryId;
	private long _parentFolderId;
	private String _name;
	private String _checksum;
	private String _description;
	private String _event;
	private long _lockUserId;
	private String _lockUserUuid;
	private String _lockUserName;
	private long _size;
	private String _type;
	private String _version;
	private long _columnBitmask;
	private DLSync _escapedModel;
}